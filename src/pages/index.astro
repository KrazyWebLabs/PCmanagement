---
import Form from "@form/Form.astro";
import FormInput from "@form/FormInput.astro";
import SubmitBtn from "@components/ui/Buttons/SubmitBtn.astro";
import LayoutWTOS from "src/layouts/LayoutWTOS.astro";
import FormSelect from "@components/ui/Forms/FormSelect.astro";
import SelectOption from "@components/ui/Forms/SelectOption.astro";
import searchPC from "@functions/SearchPC";
import { verifyUser, userHasSession } from "@functions/verifyUser";
import type { InputFieldArr } from "@customTypes/InputType";
import { turso } from "src/turso";
import { NOW } from "astro:db";
import getDate from "@functions/GetDate";

const inputs: InputFieldArr[] = [
  {
    name: "userID",
    label: "Matrícula",
    type: "text",
    isRequired: true,
    placeholder: "20104769",
  },
];

const { rows } = await turso.execute(`SELECT * FROM Area`);
const areas = rows;
let pcName;
let area;

if (Astro.request.method === "POST") {
  // Parse form data
  const formData = await Astro.request.formData();
  const userID = formData.get("userID");
  const fareaID = formData.get("areaID");
  const fecha = getDate();

  if (typeof userID === "string" && typeof fareaID === "string") {
    if (await verifyUser(Number(userID))) {
      if (await userHasSession(Number(userID))) {
        await turso.execute(`
          UPDATE PC SET statusID = 1, userID = NULL WHERE userID == ${userID};
        `);
        await turso.execute(`
          UPDATE AssignmentRegister 
          SET statusID = 1,
              userID = ${userID},
              _updatedAt = '${fecha}'
          WHERE userID = ${userID} AND statusID = 3;
        `);

        return new Response(
          `<script>
              alert("La sesion de ${userID} ha sido terminada");
              window.location.href = "/";
            </script>`,
          {
            headers: { "Content-Type": "text/html" },
          }
        );
      } else {
        try {
          const search = await searchPC(Number(fareaID));
          const { id, name, areaID } = search[0];

          pcName = name;
          area = areas.find((room) => room.id === areaID)?.name;
          await turso.execute(
            `UPDATE PC SET statusID = 3, userID = ${userID} WHERE id = ${id};`
          );

          return Astro.redirect(
            `/assigned?pcName=${pcName}&area=${area}&userID=${userID}`
          );
        } catch (e: any) {
          console.error(
            `No se puede asignar un PC a ${userID}\n\nError: ${e.message}`
          );
          return new Response(
            `<script>
              alert("No se puede asignar un PC a ${userID}");
              window.location.href = "/";
            </script>`,
            {
              headers: { "Content-Type": "text/html" },
            }
          );
        }
      }
    } else {
      return Astro.redirect("/register");
    }
  }
}
---

<LayoutWTOS title="Asignación de PC">
  <div
    class="flex items-center justify-center flex-col mt-36 max-w-screen-xl mx-auto px-4 md:px-8 md:flex"
  >
    <Form title="Asignación de PC">
      {
        inputs.map((inp) => (
          <FormInput
            name={inp.name}
            type={inp.type}
            isRequired
            placeholder={inp.placeholder}
          >
            {inp.label}
          </FormInput>
        ))
      }
      <FormSelect title="Selecciona Sala" name="areaID">
        <SelectOption isSelected value="">--Selecciona una Sala--</SelectOption>
        {
          areas?.map((area) => (
            <SelectOption value={area.id ? area.id?.toString() : ""}>
              {area.name}
            </SelectOption>
          ))
        }
      </FormSelect>
      <div class="flex justify-center items-center min-w-full mt-2">
        <SubmitBtn> Buscar </SubmitBtn>
      </div>
    </Form>
    <div class="dark:text-white">
      ¿No estas registrado? <a href="/register" class="text-LegacyBlue-600"
        >¡Registrate!</a
      >
    </div>
  </div>
</LayoutWTOS>
